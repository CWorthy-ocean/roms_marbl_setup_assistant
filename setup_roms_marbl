#!/bin/bash
set -e
#--------------------------------------------------------------------------------
# SCRIPT FOR FIRST TIME SETUP
# This program will acquire the necessary codebases, create an environment for
# your machine, and set up libraries necessary to run

#--------------------------------------------------------------------------------

if [[ "$#" -eq 0 || "$1" == "-h" || "$1" == "--help" ]];then    
    echo "
	Usage: $(basename "$0") [target_machine]

	Description:
		Set up ROMS-MARBL for the first time on a machine. This script creates an environment
		in which to install and  run ROMS-MARBL, and obtains and compiles external codebases.

		After successful setup:
		      - activate the ROMS-MARBL environment at any time using 'roms_marbl_env'
		      - You will be prompted to optionally install the roms_marbl_example case
	
      	Options:
	-h, --help : Display this help message

	target_machine : 
		osx_arm64_gnu          : Install ROMS-MARBL on an (M2) Mac with Apple Silicon (ARM64 architecture)
		                      using GNU toolchain via Conda
		sdsc_expanse_intel     : Install ROMS-MARBL on SDSC's Expanse HPC using Intel toolchain
				      via Environment Modules
		sdsc_expanse_gnu       : Install ROMS-MARBL on SDSC's Expanse HPC using GNU toolchain
				      via Environment Modules
		ncar_derecho_intel     : Install ROMS-MARBL on NCAR's Derecho HPC using Intel toolchain	
				      via Environment Modules
		nersc_perlmutter_gnu   : Install ROMS-MARBL on NERSC's perlmutter HPC using GNU toolchain
				      via Environment Modules
		linux_generic          : Attempt to install ROMS-MARBL on a generic linux machine
				      via conda (YMMV!)
	"
    exit 0
fi

roms_marbl_setupdir=$(pwd)

# error_handler() {
#     local last_command="$BASH_COMMAND"
#     echo "Error: Command '${last_command}' failed with exit code $?"
#     echo "Line $LINENO: An error occurred."
#     echo "See the most recent file in the setup_logs directory for details."
# }
# trap 'error_handler' ERR

# First check we can use git:
if ! command -v git &> /dev/null;
then
    echo "Error: git is not installed or not in the PATH."
    echo "git is required by the ROMS-MARBL setup assistant. See:"
    echo "https://git-scm.com/downloads"

    exit 1
fi


################################################################################
# MACHINE SPECIFIC COMMANDS AND VARIABLE SETTINGS
mkdir -p "${roms_marbl_setupdir}/setup_logs"

echo "Setting up ROMS-MARBL. Each step may take a while, please be patient."
echo "In case of an unexpected exit, see setup_logs directory for details"
case "$1" in
    osx_arm64_gnu | linux_generic)
	# 0. Check for conda:
	if ! command -v conda &> /dev/null;
	then
	    echo "Error: conda is not installed or not in the PATH."
	    echo "For $1, conda is required. See:"
	    echo "https://docs.conda.io/projects/conda/en/latest/user-guide/install/index.html"
	    exit 1
	fi
	
	# 1. CHECKOUT EXTERNALS
	echo "getting external packages as specified in setup_files/externals_info.sh..."

	{
	    source ./setup_files/externals_info.sh
	    # ROMS:

	    if [ -d "${ROMS_LOCAL_PATH}"/.git ];then
		current_remote=$(git -C "${ROMS_LOCAL_PATH}" remote get-url origin)
		if [ "$current_remote" == "${ROMS_REPO_URL}" ]; then
		    echo "Repository already found in ${ROMS_LOCAL_PATH}. Skipping clone."
		else
		    git clone "${ROMS_REPO_URL}" "${ROMS_LOCAL_PATH}"
		fi
	    else
		git clone "${ROMS_REPO_URL}" "${ROMS_LOCAL_PATH}"
	    fi
	    git -C "${ROMS_LOCAL_PATH}" checkout "${ROMS_CHECKOUT_TARGET}"
	    ROMS_LOCAL_PATH=$(readlink -f "${ROMS_LOCAL_PATH}")		
	    # MARBL:
	    if [ -d "${MARBL_LOCAL_PATH}"/.git ];then
		current_remote=$(git -C "${MARBL_LOCAL_PATH}" remote get-url origin)
		if [ "$current_remote" == "${MARBL_REPO_URL}" ]; then
		    echo "Repository already found in ${MARBL_LOCAL_PATH}. Skipping clone."
		else
		    git clone "${MARBL_REPO_URL}" "${MARBL_LOCAL_PATH}"
		fi
	    else
		git clone "${MARBL_REPO_URL}" "${MARBL_LOCAL_PATH}"
	    fi
	    
	    git -C "${MARBL_LOCAL_PATH}" checkout "${MARBL_CHECKOUT_TARGET}"
	    MARBL_LOCAL_PATH=$(readlink -f "${MARBL_LOCAL_PATH}")
	    
	} > "${roms_marbl_setupdir}/setup_logs"/1_checkout_externals.log 2>&1
	echo "...done (see setup_logs/1_checkout_externals.log)."
	echo "Summary:"
	echo "  - Cloned ${ROMS_REPO_URL} to ${ROMS_LOCAL_PATH} and checked out ${ROMS_CHECKOUT_TARGET}"
	echo "  - Cloned ${MARBL_REPO_URL} to ${MARBL_LOCAL_PATH} and checked out ${MARBL_CHECKOUT_TARGET}"
	
	# 2. Set up environment
	echo "----------------------------------------"
	echo "Setting up local environment for $1..."
	
	{
	    # Check if env exists, install if not
	    roms_marbl_env="${roms_marbl_setupdir}/setup_files/conda_envs/roms_marbl_gnu/"
	    if [ -d ${roms_marbl_env} ] ;then
	       # conda directory exists
	       if [ -z "$ROMSMARBL_ROOT" ];then
		   # Environment exists but variable doesn't exist
		   echo "----------------------------------------" >&2
		   echo "ERROR: Conda environment ${roms_marbl_env} exists but does not appear to be active." >&2
		   echo "Activate the environment using either:" >&2
		   echo "     - the roms_marbl_env command" >&2
		   echo "     - conda activate ${roms_marbl_env}" >&2
		   echo "... then run this script again" >&2
		   exit 1
	       fi
	       
	    else
		conda env create -f setup_files/conda_envs/roms_marbl_gnu.yml --prefix="${roms_marbl_env}"
		source $(conda info --base)/etc/profile.d/conda.sh
		conda activate "${roms_marbl_env}" 
		# Trim prefix in shell PS1 to just env dirname, not full path	    
		conda config --set env_prompt '({name})'
		# ii. SET ENVIRONMENT VARIABLES
		conda env config vars set ROMS_ROOT="${ROMS_LOCAL_PATH}" -p "${roms_marbl_env}" > /dev/null
		conda env config vars set MARBL_ROOT="${MARBL_LOCAL_PATH}" -p "${roms_marbl_env}" > /dev/null
		conda env config vars set ROMSMARBL_ROOT="$(pwd)" -p "${roms_marbl_env}" > /dev/null
		conda env config vars set NETCDFHOME="${roms_marbl_env}" -p "${roms_marbl_env}" > /dev/null
		conda env config vars set MPIHOME="${roms_marbl_env}" -p "${roms_marbl_env}" > /dev/null
		conda env config vars set ROMSMARBL_SYSTEM="$1" -p "${roms_marbl_env}" > /dev/null
		conda activate "${roms_marbl_env}" # The following are dependent on previous env vars so need to activate to see them
		conda env config vars set LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$NETCDFHOME/lib" -p "${roms_marbl_env}" > /dev/null
		conda env config vars set PATH="$(pwd):$ROMS_ROOT/Tools-Roms:$PATH" -p "${roms_marbl_env}" > /dev/null
		conda activate "${roms_marbl_env}"	    
		
	    fi
	
	# Alias command to go in .zshrc for future environment activation
 	ROMSMARBL_ENV_ALIAS=\'"conda activate ${roms_marbl_env}"\'
	linux_hpc=false
	compiler=gnu
	} > "${roms_marbl_setupdir}/setup_logs"/2_configure_environment.log 2>&1
	echo "...done (see setup_logs/2_configure_environment.log). "
	echo "Summary:"
	echo "    - Created a conda environment at ${roms_marbl_env} with necessary environment variables and dependencies"
	
	;;
    
    sdsc_expanse_intel)
	linux_hpc=true
	compiler=intel
	expected_syshost="expanse"
	env_file=setup_files/additional_files/sdsc_expanse/expanse_environment.sh
	;;
    
    sdsc_expanse_gnu)
	echo "https://www.youtube.com/watch?v=ogwouE_Msd4"
	;;
    
    ncar_derecho_intel)
	linux_hpc=true
	compiler=intel
	expected_syshost="derecho"
	env_file=setup_files/additional_files/ncar_derecho/derecho_environment.sh
	;;
    
    nersc_perlmutter_intel)
	linux_hpc=true
	compiler=intel
	expected_syshost="perlmutter"
	env_file=setup_files/additional_files/nersc_perlmutter/perlmutter_environment_intel.sh
	;;
    nersc_perlmutter_gnu)
	linux_hpc=true
	compiler=gnu
	expected_syshost="perlmutter"
	env_file=setup_files/additional_files/nersc_perlmutter/perlmutter_environment_gnu.sh
	;;    
    *)
	echo "Your machine $1 is not recognized or may not be supported. For a list of supported
	systems, run ./setup_roms_marbl -h"
	exit 1
	;;
esac

if [ $linux_hpc = true ];then
    if [ -z "$LMOD_SYSHOST" ];then
	if [ -z "$LMOD_SYSTEM_NAME" ];then
	   echo "LMOD_SYSHOST and LMOD_SYSTEM_NAME environment variables undefined."
	   echo "There may be a problem with your environment."
	   exit 1
	else
	    lmod_name="${LMOD_SYSTEM_NAME}"
	fi
    else
	lmod_name="${LMOD_SYSHOST}"
    fi
    	if [ "$lmod_name" != "$expected_syshost" ];then
	    echo "You do not appear to be on $expected_syshost.
	    If you believe you are reading this message in error, please raise an issue:
	    https://github.com/CWorthy-ocean/roms_marbl_setup_assistant/issues/new
	    Exiting setup
	    "
	    exit 1
	else
	    echo "compiling on $expected_syshost"
	fi
	
	# 1. CHECKOUT EXTERNALS
	echo "----------------------------------------"
	echo "getting external packages as specified in setup_files/externals_info.sh..."	
	{
	    source ./setup_files/externals_info.sh

	    if [ -d "${ROMS_LOCAL_PATH}"/.git ];then
		current_remote=$(git -C "${ROMS_LOCAL_PATH}" remote get-url origin)
		if [ "$current_remote" == "${ROMS_REPO_URL}" ]; then
		    echo "Repository already found in ${ROMS_LOCAL_PATH}. Skipping clone."
		else
		    git clone "${ROMS_REPO_URL}" "${ROMS_LOCAL_PATH}"
		fi
	    else
		git clone "${ROMS_REPO_URL}" "${ROMS_LOCAL_PATH}"		
	    fi
	    git -C "${ROMS_LOCAL_PATH}" checkout "${ROMS_CHECKOUT_TARGET}"
	    ROMS_LOCAL_PATH=$(readlink -f "${ROMS_LOCAL_PATH}")		
		
	    # MARBL:
	    if [ -d "${MARBL_LOCAL_PATH}"/.git ];then
		current_remote=$(git -C "${MARBL_LOCAL_PATH}" remote get-url origin)
		if [ "$current_remote" == "${MARBL_REPO_URL}" ]; then
		    echo "Repository already found in ${ROMS_LOCAL_PATH}. Skipping clone."
		else
		    git clone "${MARBL_REPO_URL}" "${MARBL_LOCAL_PATH}"		    
		fi
	    else
		git clone "${MARBL_REPO_URL}" "${MARBL_LOCAL_PATH}"
	    fi
	    git -C "${MARBL_LOCAL_PATH}" checkout "${MARBL_CHECKOUT_TARGET}"
	    MARBL_LOCAL_PATH=$(readlink -f "${MARBL_LOCAL_PATH}")
	    
	} > "${roms_marbl_setupdir}/setup_logs"/1_checkout_externals.log 2>&1
	echo "...done (see setup_logs/1_checkout_externals.log). "
	echo "Summary:"
	echo "  - Cloned ${ROMS_REPO_URL} to ${ROMS_LOCAL_PATH} and checked out ${ROMS_CHECKOUT_TARGET}"
	echo "  - Cloned ${MARBL_REPO_URL} to ${MARBL_LOCAL_PATH} and checked out ${MARBL_CHECKOUT_TARGET}"

	#2. Set up environment
	echo "----------------------------------------"
	echo "Setting up local environment for $1..."
	{
	ROMS_ROOT="${ROMS_LOCAL_PATH}"
	cp "$env_file" "$HOME/.ROMSMARBL"
	if ! grep -q "export ROMS_ROOT=${ROMS_LOCAL_PATH}" "${HOME}/.ROMSMARBL";then
	    echo "We are now modifying $HOME/.ROMSMARBL"
	    echo "export ROMS_ROOT=${ROMS_LOCAL_PATH}"                        >> "$HOME/.ROMSMARBL"
	    echo "export MARBL_ROOT=${MARBL_LOCAL_PATH}"            >> "$HOME/.ROMSMARBL"
	    echo "export ROMSMARBL_ROOT=$(pwd)"                  >> "$HOME/.ROMSMARBL"	    
	    echo "export ROMSMARBL_SYSTEM=$1"                               >> "$HOME/.ROMSMARBL"
	    echo 'export PATH=$PATH:${ROMS_ROOT}/Tools-Roms'":$(pwd)"   >> "$HOME/.ROMSMARBL"
	fi
	source "${HOME}/.ROMSMARBL"
	echo "nc-config"
	nc-config --prefix
	echo "nf-config"
	nf-config --prefix
	# Alias command to go in bashrc for future environment activation
	ROMSMARBL_ENV_ALIAS=\'"source ${HOME}/.ROMSMARBL"\'
	} > setup_logs/2_configure_environment.log 2>&1
	echo "...done (see setup_logs/2_configure_environment.log). "
	echo "Summary:"
	echo "   - Wrote modules to load and environment variables to ${HOME}/.ROMSMARBL"
fi

# UNIVERSAL COMMANDS USING ABOVE CONFIGURED ENVIRONMENTS AND VARIABLES
################################################################################


# 2. COMPILE MARBL
echo "----------------------------------------"
echo "compiling MARBL..."
{
    cd ${MARBL_ROOT}/src
    make ${compiler} USEMPI=TRUE
    cd ${roms_marbl_setupdir}
} > ${ROMSMARBL_ROOT}/setup_logs/3_compile_MARBL.log 2>&1
echo "...done (see setup_logs/3_compile_MARBL.log)"

# 3. COMPILE ROMS/NHMG and ROMS/TOOLS-ROMS LIBRARIES

# i. Distribute universal ROMS makefiles
echo "----------------------------------------"
echo "compiling ROMS..."
{
    echo "distributing universal Makefiles"
    ls ${ROMS_ROOT}
    cd setup_files/additional_files/
    rsync -av ROMS_Makefiles/* ${ROMS_ROOT}
    
    ## ii. make NHMG library
    echo "compiling NHMG library..."
    cd ${ROMS_ROOT}/Work
    make COMPILER=${compiler} nhmg
    echo "...done"
    
    ## iii. make Tools-Roms
    echo "compiling Tools-Roms package..."
    cd ${ROMS_ROOT}/Tools-Roms
    make COMPILER=${compiler}
    cd ${roms_marbl_setupdir}   
    echo "...done" 
} > ${roms_marbl_setupdir}/setup_logs/4_compile_ROMS.log 2>&1
echo "... done (see setup_logs/4_compile_ROMS.log)."
echo " Summary:"
echo "   - distributed univeral makefiles from setup_files/additional_files/ROMS_Makefiles"
echo "   - compiled NHMG library"
echo "   - compiled Tools-Roms package"
    
# 4. Establish access to the ROMS-MARBL environment in future
SHRC="${HOME}/.${SHELL##*/}rc" # .bashrc or .zshrc on OSX
echo "################################################################################"
echo "All compilation steps successful!!" 
if ! grep -q "${ROMSMARBL_ENV_ALIAS}" ${SHRC}; then
    while true;do
	read -p \
	     "
	     This setup script will now modify your ${SHRC} file to enable an environment for running ROMS-MARBL.
             By default, an alias (roms_marbl_env) will be added so that you can quickly set the environment up. Continue? (y/n)
	     " \
	     continuestring
    
    case "${continuestring}" in
	[yY] | [yY][eE][sS] )
	    echo "#SET UP ENVIRONMENT FOR RUNNING ROMS-MARBL:" >> "${SHRC}"
	    echo "################################################################################" >> "${SHRC}"
	    echo "alias roms_marbl_env=${ROMSMARBL_ENV_ALIAS}" >> "${SHRC}"
	    echo "################################################################################" >> "${SHRC}"

	    echo "--------------------------------------------------------------------------------"
	    echo "Your ${SHRC} file has been modified. In future, enter "
	    echo "roms_marbl_env"
	    echo " to activate the environment for running ROMS-MARBL."
	    echo "NOTE: This will not work until you either log back in or run"
	    echo "source ${SHRC}"
	    echo "--------------------------------------------------------------------------------"
	    break
	    ;;
	[nN] | [nN][oO] )
	    echo "--------------------------------------------------------------------------------"
	    echo "Your ${SHRC} file has not been modified. You will need to manually activate the ROMS_MARBL environment using"
	    echo "${ROMSMARBL_ENV_ALIAS}"
	    echo "--------------------------------------------------------------------------------"
	    break
	    ;;
	*)
	    echo "Please answer y/n"
	    ;;
    esac
    done
fi
while true;do
    read -p "ROMS-MARBL has been configured on your machine. Would you like to set up the roms_marbl_example case to run? (y/n) " response
    case "${response}" in
	[yY] | [yY][eE][sS] )
	    echo "----------------------------------------"
	    echo "Cloning roms_marbl_example..."
	    {
		RME_repo="https://github.com/CWorthy-ocean/cstar_blueprint_roms_marbl_example"
		RME_checkout_target="no_cstar"
		casedir=${ROMSMARBL_ROOT}/cases/roms_marbl_example
		
		# Download ROMS source code:
		if [ -d "${casedir}/.git" ];then
		    current_remote=$(git -C "${casedir}" remote get-url origin)
		    if [ "$current_remote" == "${RME_repo}" ]; then
			echo "Repository already found in ${casedir}. Skipping clone."
		    else
			git clone "${RME_repo}" "${casedir}"		
		    fi
		else
		    git clone "${RME_repo}" "${casedir}"		
		fi
		git -C "${casedir}" checkout --quiet "${RME_checkout_target}"
		cd ${roms_marbl_setupdir}
	
	    } > ${roms_marbl_setupdir}/setup_logs/5_clone_roms_marbl_example #2>&1
	    echo "...done (see setup_logs/5_clone_roms_marbl_example.log"
	    echo " Summary:"
	    echo "     - cloned https://github.com/CWorthy-ocean/cstar_blueprint_roms_marbl_example to ${casedir}"
	    echo "     - checked out ${RME_checkout_target}"
	    # Compile
	    echo "Compiling roms_marbl_example..."
	    {
		cd ${casedir}/code
		cp ${ROMS_ROOT}/Work/Makefile .
		#    } > setup_logs/5_clone_roms_marbl_example.log 2>&1
		
		if [[ ${ROMSMARBL_SYSTEM} == *"_gnu" ]];then
		    if [ -d Compile ];then
			rm -r Compile;
		    fi
		    if [ -e ${casedir}/roms ];then
			rm ${casedir}/roms
		    fi
		    make COMPILER=gnu 2>&1
		else
		    make 2>&1
		fi
		if [ -L input_data ];then
		    rm input_data;
		fi
		
		cd ${casedir}; ln -s code/roms .
		cd ${ROMSMARBL_ROOT}
	    } > ${roms_marbl_setupdir}/setup_logs/6_compile_roms_marbl_example.log #2>&1
	    echo "...done (see setup_logs/6_compile_roms_marbl_example.log"
	    
	    echo "--------------------------------------------------------------------------------"
	    echo "roms_marbl_example download and compile complete. See "
	    echo "${ROMSMARBL_ROOT}/cases/roms_marbl_example/README.md"
	    echo "for instructions on how to run".
	    echo "--------------------------------------------------------------------------------"
	    break
	    ;;
	[nN] | [nN][oO] )	
	    echo "Skipping roms_marbl_example download/compile. You can manually perform this step any time"
	    echo "see https://github.com/CWorthy-ocean/cstar_blueprint_roms_marbl_example."
	    exit 0
	    ;;
	*)
	    echo "Please answer y/n"
    esac
done
